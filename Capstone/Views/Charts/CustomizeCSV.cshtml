@{
    ViewBag.Title = "Customizable Charts (CSV)";
    ViewBag.activeNav = 4;
}

@section cssSection {
    <link href="../../StyleSheets/charts.css" rel="stylesheet" type="text/css" />

    <style type="text/css">
	    html { height: 100%; }
		body { height: 100%; }
		#main { height: 100%; }

		.hidden { display: none; }

		.chart-container { margin-left: auto; margin-right: auto; }

		svg:not(:root) { overflow: visible; }
	</style>
}


<div id="main" class="container" style="margin-bottom: 10px;">
    <div class="row">
        <div class="col-md-12">
            Choose CSV File <input type="file" id="csvfile" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <br />
            <br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Select Chart Type:
        </div>
        <div class="col-md-3">
            Select Variable 1 (Y-Axis)
        </div>
        <div class="col-md-3">
            Select Variable 2 (X-Axis)
        </div>
        <div class="col-md-3">
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <select id="chartTypeDrop" class="form-control">
                <option value="0">Select One</option>
                <option value="1">Run Chart</option>
                <option value="2">Box Plot</option>
                <option value="3">Funnel Chart</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="yDataDrop" class="form-control dataDrop">
                <option value="0">Select One</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="xDataDrop" class="form-control dataDrop">
                <option value="0">Select One</option>
            </select>
            <select id="xDataDrop2" class="form-control dataDrop" multiple>
            </select>
        </div>
        <div class="col-md-3">
            <input type="submit" id="submitBtn" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div id="chartDiv"></div>
        </div>
    </div>
</div>

@section jsSection {
    <script src="../../Scripts/underscore.js" type="text/javascript"></script>
    <script src="../../Scripts/underscore.math.js" type="text/javascript"></script>
    <script src="../../Scripts/Chart.js" type="text/javascript"></script>
	<script src="../../Scripts/d3.v3.js" type="text/javascript"></script>
	<script src="../../Scripts/box.js" type="text/javascript"></script>

	<script type="text/javascript">
	    $(document).ready(function () {

	        Math.mean = function (array) {
	            return array.reduce(function (a, b) { return a + b; }) / array.length;
	        };

	        Math.stdev = function (array, opts) {
	            var avg = 0.0;

	            if (opts['avg']) {
	                avg = parseFloat(opts['avg']);
	            } else {
	                avg = Math.mean(array);
	            }

	            var variance = array.map(function (itm) { return (itm - avg) * (itm - avg); });

	            return Math.sqrt(variance.reduce(function (a, b) { return a + b; }) / array.length);
	        };

	        // Draw Run Chart Function - passed data and control limits
	        function drawRunChart(data, ucl, lcl, label) {
	            //var X_DATA_PARSE = d3.time.format("%d-%b-%y").parse;
	            var X_DATA_PARSE = d3.time.format("%m/%d/%Y").parse;

	            var Y_DATA_PARSE = 0;

	            // This is the key in the data object passed to draw function
	            var X_AXIS_COLUMN = "date";

	            // This is the key in the data object passed to draw function
	            var Y_AXIS_COLUMN = "val";

	            var x = d3.time.scale()
	     	             .range([0, width]);

	            var y = d3.scale.linear()
	     	             .range([height, 0]);

	            var xAxis = d3.svg.axis()
	     	                 .scale(x)
	     	   			  .orient("bottom");

	            var yAxis = d3.svg.axis()
	     	                 .scale(y)
	     	   			  .orient("left");

	            var line = d3.svg.line()
	     	                .interpolate("basis")
	     	   			 .x(function (d) { return x(d.x_axis); })
	     	   			 .y(function (d) { return y(d.y_axis); });

	            var svg = d3.select("div#chartDiv").append("svg")
	     	               .attr("width", width + margin.left + margin.right)
	     	   			.attr("height", height + margin.top + margin.bottom)
	     	   			.append("g")
	     	   			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	            data.forEach(function (d) {
	                d.x_axis = X_DATA_PARSE(d[X_AXIS_COLUMN]);

	                //d.y_axis = Y_DATA_PARSE(d[Y_AXIS_COLUMN]);
	                d.y_axis = d[Y_AXIS_COLUMN] + 0;
	            });

	            // create another data variable to include ucl and lcl in domains
	            var dataCopy = data.slice(0);
	            //console.log("ucl = ", ucl);

	            dataCopy.push({ x_axis: "", y_axis: ucl + 0 });
	            dataCopy.push({ x_axis: "", y_axis: lcl + 0 });

	            //console.log("data copy = ", dataCopy);

	            x.domain(d3.extent(data, function (d) { return d.x_axis; }));
	            //y.domain(d3.extent(data, function (d) { return d.y_axis; }));
	            y.domain(d3.extent(dataCopy, function (d) { return d.y_axis; }));

	            svg.append("g")
	               .attr("class", "x axis")
	        	   .attr("transform", "translate(0," + height + ")")
	        	   .call(xAxis);

	            svg.append("g")
	               .attr("class", "y axis")
	      		   .call(yAxis)
	               .append("text")
	               .attr("transform", "rotate(-90)")
	      		   .attr("y", 6)
	      		   .attr("dy", ".71em")
	      		   .style("text-anchor", "end")
	      		   .text(label);

	            svg.append("path")
	               .datum(data)
	      		   .attr("class", "line")
	      		   .attr("d", line);

	            // upper limit line
	            //var upper_limit = 15;
	            //console.log("ucl = ", ucl);
	            var upper_limit = ucl;
	            svg.append("line")
	               .attr("class", "limit-line")
	    		   .attr({ x1: 0, y1: y(upper_limit), x2: width, y2: y(upper_limit) });
	            svg.append("text")
	               .attr({ x: width + 5, y: y(upper_limit) + 4 })
	    		   .text("Upper Limit");

	            // lower limit line
	            //var lower_limit = 6;
	            var lower_limit = lcl;
	            svg.append("line")
	               .attr("class", "limit-line")
	    		   .attr({ x1: 0, y1: y(lower_limit), x2: width, y2: y(lower_limit) });
	            svg.append("text")
	               .attr({ x: width + 5, y: y(lower_limit) + 4 })
	    		   .text("Lower Limit");
	        }

	        // Function to Calculate Error Bars for Box and Whisker Plot
	        function iqr(k) {
	            return function (d, i) {
	                var q1 = d.quartiles[0];
	                var q3 = d.quartiles[2];
	                var iqr = (q3 - q1) * k;
	                var i = -1;
	                var j = d.length;

	                while (d[++i] < q1 - iqr);
	                while (d[--j] > q3 + iqr);
	                return [i, j];
	            }
	        }

	        // Draw Box Plot function - passed data
	        function drawBoxPlot(data, min, max, title) {
	            var labels = true;

	            //var margin = { top: 30, right: 50, bottom: 90, left: 50 };
	            //var width = 960 - margin.left - margin.right;
	            //var height = 500 - margin.top - margin.bottom;

	            // Parse through data
	            // Convert all to integers Math.floor()

	            var chart = d3.box()
	                .whiskers(iqr(1.5))
	                .height(height)
	                .domain([min, max])
	                .showLabels(labels);

	            var svg = d3.select('div#chartDiv')
	                        .append("svg")
	                        .attr('width', width + margin.left + margin.right)
	                        .attr('height', height + margin.top + margin.bottom)
	                        .attr('class', 'box')
	                        .append('g')
	                        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

	            var x = d3.scale.ordinal()
	                            .domain(data.map(function (d) { return d[0] }))
	                            .rangeRoundBands([0, width], 0.7, 0.3);

	            var xAxis = d3.svg.axis()
	                              .scale(x)
	                              .orient('bottom')

	            var y = d3.scale.linear()
	                            .domain([min, max])
	                            .range([height + margin.top, 0 + margin.top]);

	            var yAxis = d3.svg.axis()
	                              .scale(y)
	                              .orient('left');

	            // draw box plots
	            svg.selectAll('.box')
	                    .data(data)
	                    .enter()
	                    .append('g')
	                    .attr("transform", function (d) { return "translate(" + x(d[0]) + "," + margin.top + ")"; })
	                    .call(chart.width(x.rangeBand()));

	            // draw title
	            svg.append('text')
	                    .attr("x", width / 2)
	                    .attr("y", 0 + (margin.top / 2))
	                    .attr("text-anchor", "middle")
	                    .style("font-size", '18px')
	                    .text(title.yAxis + " vs. " + title.xAxis);

	            // draw y-axis
	            svg.append('g')
	                    .attr('class', 'y axis')
	                    .call(yAxis)
	                    .append('text')
	                    .attr('transform', 'rotate(-90)')
	                    .attr('y', -50)
	                    .attr('x', -(height / 2))
	                    .attr('dy', '.71em')
	                    .style('text-anchor', 'end')
	                    .style('font-size', '16px')
	                    .text(title.yAxis);

	            // draw x-axis
	            svg.append('g')
	                    .attr('class', 'x axis')
	                    .attr('transform', 'translate(0,' + (height + margin.top + 15) + ')')
	                    .call(xAxis)
	                    .append('text')
	                    .attr('x', width / 2)
	                    .attr('y', 85)
	                    .attr('dy', '.71em')
	                    .style('text-anchor', 'middle')
	                    .style('font-size', '16px')
	                    .text(title.xAxis);


	            $("g.x g.tick text").map(function () {
	                // translation formula:
	                // y = 0.4932x + 11.422
	                var translation = $(this).width() * 0.4932 + 11.422;
	                $(this).attr("transform", "rotate(90), translate(" + translation + ", -15)");

	                //console.log("translation = ", translation);

	                return;
	            });

	            // Transform X-Axis Labels
	            //var xLabelsArray = $("g.x g.tick text").map(function () { return $(this).width(); }).get();
	            //var len = xLabelsArray.length;
	            //var xLabelTransform = [];

	            //$("g.x g.tick text").attr("transform", "rotate(90), translate(" + val + ", -15)");

	        }

	        var margin = { top: 20, right: 100, bottom: 30, left: 50 };
	        var width = 960 - margin.left - margin.right;
	        var height = 500 - margin.top - margin.bottom;

	        var $body = $("body");
	        var bodyHeight = $body.height();
	        var $chartDiv = $("#chartDiv");

	        var $chartTypeDrop = $("#chartTypeDrop");
	        var $yDataDrop = $("#yDataDrop");
	        var $xDataDrop = $("#xDataDrop");
	        var $xDataDrop2 = $("#xDataDrop2");

	        var csvArray = [];
	        var titles = [];

	        $chartTypeDrop.change(function () {
	            // if selecting BoxPlot, show proper drop downs
	            if ($(this).val() == 2) {
	            }
	        });

	        $("#csvfile").change(function (e) {
	            if (e.target.files != undefined) {
	                var reader = new FileReader();

	                reader.onload = function (e) {
	                    var str = e.target.result;
	                    csvArray = d3.csv.parseRows(str);

	                    titles = csvArray[0];
	                    csvArray.splice(0, 1);
	                    var title_html = '';
	                    var label_html = '';
	                    _.each(titles, function (item, i) {
	                        //console.log(item, i);
	                        title_html += '<option value="' + i + '">' + item + '</option>';
	                        label_html += '<option value="' + item + '">' + item + '</option>';
	                    });
	                    title_html = '<option value="">Select One</option>' + title_html;
	                    //console.log("title_html = ", title_html);

	                    $(".dataDrop").html(title_html);
	                    $(".dataLabelDrop").html(label_html);
	                };

	                reader.readAsText(e.target.files.item(0));
	            }
	        });

	        $("#submitBtn").click(function (e) {
	            e.preventDefault();

	            var chartType = parseInt($chartTypeDrop.val());
	            $chartDiv.empty();

	            if (chartType == 1) {           // Draw Run Chart
	                var dataset = [];

	                var Y_COL = $yDataDrop.val();
	                var X_COL = $xDataDrop.val();

	                _.each(csvArray, function (item, i) {
	                    var num = parseInt(item[Y_COL]);
	                    var dte = item[X_COL];

	                    if ((num !== '') && (typeof num !== "undefined") && (dte !== '') && (typeof dte !== "undefined")) {
	                        var dataObj = { date: dte, val: num };
	                        dataset.push(dataObj);
	                    }
	                });

	                var avg = _.reduce(dataset, function (memo, ob) { return memo + ob['val']; }) / dataset.length;

	                var variance = _.reduce(dataset, function (memo, ob) {
	                    return ((ob['val'] - avg) * (ob['val'] - avg)) + memo;
	                }) / dataset.length;

	                var stdev = Math.sqrt(variance);

	                //var avg = calcAvg(dataset);
	                //var stdev = calcStDev(dataset);
	                var ucl = avg + (3 * stdev);
	                var lcl = avg - (3 * stdev);

                    // Sort data by date
	                dataset = _.sortBy(dataset, function (o) { var dt = new Date(o.date); return dt; });

	                drawRunChart(dataset, ucl, lcl, "Y-Axis Label");
	                console.log("dataset = ", dataset);
	                console.log("avg = ", avg);
	                console.log("ucl = ", ucl);
	                console.log("lcl = ", lcl);
	                console.log("variance = ", variance);
	                console.log("stdev = ", stdev);

	            } else if (chartType == 2) {    // Draw Box Plot 
	                var dataset = [];

	                // Get Selected Parameters
	                var Y_COL = $yDataDrop.val();
	                var X_COL = $xDataDrop2.val();

	                _.each(X_COL, function (item, i) {
	                    // Create X-Axis Label
	                    var labelText = $xDataDrop2.find("option[value='" + item + "']").text();
	                    var labelTextArr = labelText.split(/\(choice=(.*)\)/);
	                    labelText = labelTextArr[1];

	                    // Format dataset
	                    dataset[i] = [];
	                    dataset[i][0] = labelText;
	                    dataset[i][1] = [];
	                });

	                var max = -Infinity;
	                var min = Infinity;

	                // format data
	                _.each(csvArray, function (item, i) {
	                    var num = parseInt(item[Y_COL]);
	                    if ((num !== '') && (typeof num !== "undefined")) {
	                        _.each(X_COL, function (header, i) {
	                            if (item[header] == "Checked") {
	                                dataset[i][1].push(num);
	                                if (num > max) max = num;
	                                if (num < min) min = num;
	                            }
	                        });
	                    }
	                });
	                //console.log("dataset = ", dataset);

	                // Need a better way to define X- and Y- axis labels
	                var titleObj = { yAxis: $yDataDrop.find("option[value='" + Y_COL + "']").text(), xAxis: $xDataDrop2.find("option[value='" + X_COL[0] + "']").text() };

	                drawBoxPlot(dataset, min, max, titleObj);

	                var chartHeight = $chartDiv.height();
	                $body.height(bodyHeight + (chartHeight / 2));

	            } else if (chartType == 3) {	// Draw Funnel Plot 
	            }
	        });

	    });
	</script>
}