@{
    ViewBag.Title = "My Hospital Report";
    ViewBag.activeNav = 1;
}

@section cssSection {
    <link href="../../StyleSheets/charts.css" rel="stylesheet" type="text/css" />

    <style type="text/css">
	    html { height: 100%; }
		body { height: 100%; }
		#main { height: 100%; }

	    .chart-container { margin-left: auto; margin-right: auto; }

		svg:not(:root) { overflow: visible; }
	</style>
}

<div id="main" class="container" style="margin-bottom: 10px;">

    <div class="chart-container">
        <h3 class="chartTitle">XMR Chart - Length of Stay vs Time</h3>
    	<div id="chartDiv1" class="chartDiv"></div>
    </div>

    <div class="chart-container">
        <h3 class="chartTitle">Bar Chart - Feeding Method vs Length Of Stay</h3>
    	<div id="chartDiv2" class="chartDiv"></div>
    </div>

    <div class="chart-container">
        <h3 class="chartTitle">XMR Chart - Percent Receiving Breast Milk</h3>
    	<div id="chartDiv3" class="chartDiv"></div>
    </div>

    <div class="chart-container">
        <h3 class="chartTitle">XMR Chart - Percent Needing Pharmacology Treatment</h3>
    	<div id="chartDiv4" class="chartDiv"></div>
    </div>

</div>

@section jsSection {
    <script src="../../Scripts/Chart.js" type="text/javascript"></script>
	<script src="../../Scripts/d3.v3.js" type="text/javascript"></script>
	<script src="../../Scripts/box.js" type="text/javascript"></script>

	<script type="text/javascript">
	    $(document).ready(function () {

	        var margin = { top: 20, right: 100, bottom: 30, left: 50 };
	        var width = 960 - margin.left - margin.right;
	        var height = 500 - margin.top - margin.bottom;

	        // Draw Run Chart Function - passed data and control limits
	        var drawRunChart = function (data, ucl, lcl, label, chartIndex) {
	            var X_DATA_PARSE = d3.time.format("%m/%d/%Y").parse;
	            var Y_DATA_PARSE = 0;

	            // This is the key of the data object passed to this function
	            var X_AXIS_COLUMN = "date";

	            // This is the key in the data object passed to this function
	            var Y_AXIS_COLUMN = "dta";

	            // Set Scale for x-axis
	            var x = d3.time.scale()
	     	             .range([0, width]);

	            // Set Scale for y-axis
	            var y = d3.scale.linear()
	     	             .range([height, 0]);

	            // Set orientation for x-axis
	            var xAxis = d3.svg.axis()
	     	                 .scale(x)
	     	   			  .orient("bottom");

	            // Set orientation for y-axis
	            var yAxis = d3.svg.axis()
	     	                 .scale(y)
	     	   			  .orient("left");

	            // draw line
	            var line = d3.svg.line()
	     	                .interpolate("basis")
	     	   			 .x(function (d) { return x(d.x_axis); })
	     	   			 .y(function (d) { return y(d.y_axis); });

	            // set up chart dimensions and location
	            var svg = d3.select("div#chartDiv" + chartIndex).append("svg")
	     	               .attr("width", width + margin.left + margin.right)
	     	   			.attr("height", height + margin.top + margin.bottom)
	     	   			.append("g")
	     	   			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

	            data.forEach(function (d) {
	                d.x_axis = X_DATA_PARSE(d[X_AXIS_COLUMN]);  // Converts string to d3 time format
	                d.y_axis = d[Y_AXIS_COLUMN] + Y_DATA_PARSE;            // Converts string to int
	            });

	            // create another data variable to include ucl and lcl in domains
	            var dataCopy = data.slice(0);

	            dataCopy.push({ x_axis: "", y_axis: ucl + 0 });
	            dataCopy.push({ x_axis: "", y_axis: lcl + 0 });

	            // Set x and y domains/ranges
	            x.domain(d3.extent(data, function (d) { return d.x_axis; }));
	            y.domain(d3.extent(dataCopy, function (d) { return d.y_axis; }));

	            //  Draw x-axis
	            svg.append("g")
	               .attr("class", "x axis")
	        	   .attr("transform", "translate(0," + height + ")")
	        	   .call(xAxis);

	            //  Draw y-axis
	            svg.append("g")
	               .attr("class", "y axis")
	      		   .call(yAxis)
	               .append("text")
	               .attr("transform", "rotate(-90)")
	      		   .attr("y", 6)
	      		   .attr("dy", ".71em")
	      		   .style("text-anchor", "end")
	      		   .text(label);

	            // Draw line
	            svg.append("path")
	               .datum(data)
	      		   .attr("class", "line")
	      		   .attr("d", line);


	            // Draw UCL
	            svg.append("line")
	               .attr("class", "limit-line")
	    		   .attr({ x1: 0, y1: y(ucl), x2: width, y2: y(ucl) });
	            svg.append("text")
	               .attr({ x: width + 5, y: y(ucl) + 4 })
	    		   .text("Upper Limit");

	            // Draw LCL
	            svg.append("line")
	               .attr("class", "limit-line")
	    		   .attr({ x1: 0, y1: y(lcl), x2: width, y2: y(lcl) });
	            svg.append("text")
	               .attr({ x: width + 5, y: y(lcl) + 4 })
	    		   .text("Lower Limit");

	            // Adjust height of chart div
	            var $chartDiv = $("#chartDiv" + chartIndex);
                $chartDiv.height( $chartDiv.height() + (height/10));
	        };

	        // Function to Calculate Error Bars?
	        function iqr(k) {
	            return function (d, i) {
	                var q1 = d.quartiles[0];
	                var q3 = d.quartiles[2];
	                var iqr = (q3 - q1) * k;
	                var i = -1;
	                var j = d.length;

	                while (d[++i] < q1 - iqr);
	                while (d[--j] > q3 + iqr);

	                return [i, j];
	            }
	        }

	        // Draw Box Plot function - passed data
	        function drawBoxPlot(data, min, max, title, chartIndex) {
	            var labels = true;

	            // Convert all to integers Math.floor()

	            // Chart Initalization - domain
	            var chart = d3.box()
	                .whiskers(iqr(1.5))
	                .height(height)
	                .domain([min, max])
	                .showLabels(labels);

	            // Set up chart dimensions and location
	            var svg = d3.select('div#chartDiv' + chartIndex)
	                        .append("svg")
	                        .attr('width', width + margin.left + margin.right)
	                        .attr('height', height + margin.top + margin.bottom)
	                        .attr('class', 'box')
	                        .append('g')
	                        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

	            // Set Scale and Orientation for x-axis
	            var x = d3.scale.ordinal()
	                            .domain(data.map(function (d) { return d[0] }))
	                            .rangeRoundBands([0, width], 0.7, 0.3);
	            var xAxis = d3.svg.axis()
	                              .scale(x)
	                              .orient('bottom')

	            // Set Scale and Orientation for y-axis
	            var y = d3.scale.linear()
	                            .domain([min, max])
	                            .range([height + margin.top, 0 + margin.top]);
	            var yAxis = d3.svg.axis()
	                              .scale(y)
	                              .orient('left');

	            // draw box plots
	            svg.selectAll('.box')
	                    .data(data)
	                    .enter()
	                    .append('g')
	                    .attr("transform", function (d) { return "translate(" + x(d[0]) + "," + margin.top + ")"; })
	                    .call(chart.width(x.rangeBand()));

	            // draw title
	            svg.append('text')
	                    .attr("x", width / 2)
	                    .attr("y", 0 + (margin.top / 2))
	                    .attr("text-anchor", "middle")
	                    .style("font-size", '18px')
	                    .text(title);

	            // draw y-axis
	            svg.append('g')
	                    .attr('class', 'y axis')
	                    .call(yAxis)
	                    .append('text')
	                    .attr('transform', 'rotate(-90)')
	                    .attr('y', -50)
	                    .attr('x', -(height / 2))
	                    .attr('dy', '.71em')
	                    .style('text-anchor', 'end')
	                    .style('font-size', '16px')
	                    .text('Length of Stay');

	            // draw x-axis
	            svg.append('g')
	                    .attr('class', 'x axis')
	                    .attr('transform', 'translate(0,' + (height + margin.top + 15) + ')')
	                    .call(xAxis)
	                    .append('text')
	                    .attr('x', width / 2)
	                    .attr('y', 85)
	                    .attr('dy', '.71em')
	                    .style('text-anchor', 'middle')
	                    .style('font-size', '16px')
	                    .text('Substances');


	            // Rotate and Position X-Axis Labels
	            $("g.x g.tick text").map(function () {
	                // translation formula:
	                // y = 0.4932x + 11.422
	                var translation = 0.4932 * $(this).width() + 11.422;
	                $(this).attr("transform", "rotate(90), translate(" + translation + ", -15)");

	                return;
	            });

	            // Adjust height of chart div
	            var $chartDiv = $("#chartDiv" + chartIndex);
                $chartDiv.height( $chartDiv.height() + (height/2));
	        }

	        var $chartTitle = $(".chartTitle");
	        var $body = $("body");

	        // Chart 1 - Length of Stay XMR
	        var data1 = { data: 1 };
	        $.ajax({
	            type: "POST",
	            data: data1,
	            url: "/Charts/CustomizeRunChart/",
	            dataType: "json",
	            success: function (data) {
	                drawRunChart(data.list, data.ucl, data.lcl, data.label, 1);

	                //$chartTitle[0].text("Length of Stay vs Time");
	            },
	            error: function (e) {
	                // Show error And refresh Icons
	                console.log("error getting data.", e);
	            }
	        });

	        // Chart 2 - Feeding Method Vs Length Of Stay
	        var data2 = { data: 1, data2: 3 };
	        $.ajax({
	            type: "POST",
	            data: data2,
	            url: "/Charts/CustomizeBoxPlot/",
	            dataType: "json",
	            success: function (d) {
	                var len = d.headers.length;
	                var formattedData = [];

	                for (var i = 0; i < len; i++) {
	                    formattedData[i] = [];
	                    formattedData[i][0] = d.headers[i];
	                    formattedData[i][1] = d.data[i];
	                }

	                drawBoxPlot(formattedData, d.min, d.max, d.title, 2);

	                //$chartTitle[3].text("Box and Whisker Plot");
	            },
	            error: function (e) {
	                // Show error And refresh Icons
	                console.log("error getting data.", e);
	            }
	        });

	        // Chart 3 - Percent Infants Receiving Breast Milk
	        var data3 = { data: 3 };
	        $.ajax({
	            type: "POST",
	            data: data3,
	            url: "/Charts/CustomizeRunChart/",
	            dataType: "json",
	            success: function (data) {
	                drawRunChart(data.list, data.ucl, data.lcl, data.label, 3);

	                //$chartTitle[2].text("% Infants Receiving Breast Milk (monthly) -- NEED TO MAKE CHART");
	            },
	            error: function (e) {
	                // Show error And refresh Icons
	                console.log("error getting data.", e);
	            }
	        });

	        // Chart 4 - Percent Needing Pharm Treatment XMR
	        var data4 = { data: 4 };
	        $.ajax({
	            type: "POST",
	            data: data4,
	            url: "/Charts/CustomizeRunChart/",
	            dataType: "json",
	            success: function (data) {
	                drawRunChart(data.list, data.ucl, data.lcl, data.label, 4);

	                //$chartTitle[1].text("% Infants Needing Pharmacology Treatment (monthly) --- NEED TO MAKE CHART");
	            },
	            error: function (e) {
	                // Show error And refresh Icons
	                console.log("error getting data.", e);
	            }
	        });

	    });
	</script>
}